{"ts":1367333415715,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'test_helper'\n\nclass ProfilesControllerTest < ActionController::TestCase\n  test \"should get show\" do\n    get :show\n    assert_response :success\n  end\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":163}]],"length":163}
{"contributors":[],"silentsave":false,"ts":1367333609068,"patch":[[{"diffs":[[0,"show"],[-1,"\n    assert_response :success"],[1,", id: user(:jason)profile_name\n    assert_response :success\n    assert_template 'profile_show'"],[0,"\n  e"]],"start1":118,"start2":118,"length1":37,"length2":102}]],"length":228,"saved":false}
{"ts":1367333715259,"patch":[[{"diffs":[[0,"id: user"],[1,"s"],[0,"(:jason)"]],"start1":124,"start2":124,"length1":16,"length2":17}]],"length":229,"saved":false}
{"ts":1367333743157,"patch":[[{"diffs":[[0,"(:jason)"],[1,"."],[0,"profile_"]],"start1":133,"start2":133,"length1":16,"length2":17}]],"length":230,"saved":false}
{"ts":1367333848257,"patch":[[{"diffs":[[0,"'profile"],[-1,"_"],[1,"/"],[0,"show'\n  "]],"start1":204,"start2":204,"length1":17,"length2":17}]],"length":230,"saved":false}
{"ts":1367334007357,"patch":[[{"diffs":[[0,"'profile"],[1,"s"],[0,"/show'\n "]],"start1":204,"start2":204,"length1":16,"length2":17}]],"length":231,"saved":false}
{"ts":1367334215848,"patch":[[{"diffs":[[0,"w'\n  end"],[1,"\n  \n  test \"should rende a 404 on profile not found\" do\n    get :show, id: \"doesn't exist\"\n    assert_response: :not_found\n  end"],[0,"\n\nend\n"]],"start1":217,"start2":217,"length1":14,"length2":142}]],"length":359,"saved":false}
{"ts":1367334285236,"patch":[[{"diffs":[[0,"response"],[-1,":"],[0," :not_fo"]],"start1":327,"start2":327,"length1":17,"length2":16}]],"length":358,"saved":false}
{"contributors":[],"silentsave":false,"ts":1367338552579,"patch":[[{"diffs":[[0,"nd\n  end"],[1,"\n  \n  test \"that variables are assigned on successful profile viewing\" do\n    get :show, id: users(:jason).profile_name\n  \n  end"],[0,"\n\nend\n"]],"start1":344,"start2":344,"length1":14,"length2":142}]],"length":486,"saved":false}
{"ts":1367338616128,"patch":[[{"diffs":[[0,"le_name\n"],[1,"    assert assigns(:user)\n"],[0,"  \n  end"]],"start1":464,"start2":464,"length1":16,"length2":42}]],"length":512,"saved":false}
{"ts":1367338664048,"patch":[[{"diffs":[[0,"(:user)\n"],[1,"    assert_not_empty assigns(:statuses)\n"],[0,"  \n  end"]],"start1":490,"start2":490,"length1":16,"length2":56}]],"length":552,"saved":false}
{"ts":1367340388316,"patch":[[{"diffs":[[0,"ld rende"],[1,"r"],[0," a 404 o"]],"start1":241,"start2":241,"length1":16,"length2":17}]],"length":553,"saved":false}
{"ts":1367344777627,"patch":[[{"diffs":[[0,"uses)\n  "],[1,"end\n   \n  test \"only shows the correct user's statuses\" do\n    get :show, id: users(:jason).profile_name\n    assigns(:statuses).each do |status|\n        assert_equal users(:jason) = status.user\n    end"],[0,"\n  end\n\n"]],"start1":533,"start2":533,"length1":16,"length2":217}]],"length":754,"saved":false}
{"ts":1367344828224,"patch":[[{"diffs":[[0,"son)"],[-1," ="],[1,","],[0," sta"]],"start1":716,"start2":716,"length1":10,"length2":9}]],"length":753,"saved":false}
